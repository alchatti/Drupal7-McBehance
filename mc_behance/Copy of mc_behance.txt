<?php
require_once('Client.php');
require_once('File.php');
/**
 * @file
 * A block module that displays Behance posts.
 */

 /**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function mc_behance_help($path, $arg) {
	switch ($path) {
	    case "admin/help#mc_behance":
	      return '' . t("Displays links to nodes created on this date") . '';
	      break;
	}
}
/**
 * Implements hook_menu().
 */
function mc_behance_menu() {
  $items = array();

  $items['admin/config/content/mc_behance'] = array(
    'title' => 'MC Behance',
    'description' => 'Configuration for MC Behance module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_behance_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
/**
 * Page callback: mc behance global settings
 *
 * @see mc_behance_menu()
 */
function mc_behance_form($form, &$form_state) {
  $form['mc_behance_ApiKey'] = array(
    '#type' => 'textfield',
    '#title' => t('API KEY / CLIENT ID'),
    '#default_value' => variable_get('mc_behance_ApiKey', ''),
    '#size' => 100,
    '#maxlength' => 100,
    '#description' => t('Use this link to aquired <a href="https://www.behance.net/dev/apps" target="_blank">https://www.behance.net/dev/apps</a>'),
    '#required' => TRUE,
  );
  $form['mc_behance_cache'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache In Seconds'),
    '#default_value' => variable_get('mc_behance_cache', '3600'),
    '#size' => 25,
    '#maxlength' => 25,
    '#description' => t('Use numeric values only'),
    '#number_type' => 'integer',
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['mc_behance_cache_storage'] = array(
    '#type' => 'radios',
    '#title' => t('Cache files storage location'),
    '#default_value' => variable_get('mc_behance_cache_storage', 'public'),
    '#size' => 2,
    '#description' => t('Drupal storage locations'),
    '#required' => TRUE,
    '#options' => array("public" => t("Public"),"private" => t("Private")),
  );

  return system_settings_form($form);
}
/**
 * Implements hook_block_info().
 */
function mc_behance_block_info() {
  $blocks['mc_behance_getUserProjects'] = array(
    // The name that will appear in the block list.
    'info' => t('MC Behance : list of ID or Username\'s projects'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['mc_behance_getCollectionProjects'] = array(
    // The name that will appear in the block list.
    'info' => t('MC Behance : list of a collection projects'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
/**
 * Custom content function. 
 * 
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 * 
 * @return 
 *   A result set of the targeted posts.
 */
function mc_behance_contents($delta = ''){
  $clientID = variable_get('mc_behance_ApiKey');
  $cacheTimeInSeconds = variable_get('mc_behance_cache', '4200');
  $cachStorageLocation = variable_get('mc_behance_cache_storage');
  
  $client = new Behance\Client( $clientID );
  $ID = variable_get('mc_behance_block_target_id');
  
  switch ($delta){
  	case 'mc_behance_getUserProjects':
	//File & Cache Operation
		$fileIO = new Behance\FileIO("user_". $ID, $cachStorageLocation);
		
	//Is It Cached
		if(!$fileIO -> cached($cacheTimeInSeconds)){
		  	echo 'Fresh -- >' . $ID ; //Debug line
		  	
		  	//get first page
			$query = $client->getUserProjects( $ID , ['page' => 1]);
			
			//get the other pages
			$i = 2;
			while(TRUE){
				$temp =  $client->getUserProjects( $ID , ['page' => $i]);
				if(count($temp)>0)
				{
					$query = array_merge($query, $temp);
				}
				else{
					break;
				}
				$i++;
			}
			if(count($query) > 1)
			{
				$fileIO -> write($query);
			}
		}
		break; //Done getUserProjects
	case 'mc_behance_getCollectionProjects':
			//File & Cache Operation
			$fileIO = new Behance\FileIO("colp_". $ID, $cachStorageLocation);
			
			//Is It Cached
			if(!$fileIO -> cached($cacheTimeInSeconds)){
			  	echo 'Fresh -- > getCollectionProjects ' . $ID ; //Debug line
			 
			  	//get first page
				$query = $client->getCollectionProjects( $ID , ['page' => 1]);
				
				//get the other pages
				$i = 2;
				while(TRUE){
					$temp =  $client->getCollectionProjects( $ID , ['page' => $i]);
					if(count($temp)>0)
					{
						$query = array_merge($query, $temp);
					}
					else{
						break;
					}
					$i++;
				}
				if(count($query) > 1)
				{
					$fileIO -> write($query);
				}
			}
		break; //Done getUserAppreciations
   }
      
  //Read Data from file & Return
  $query = $fileIO -> read();
  return $query;
}
/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function mc_behance_block_view($delta = '') {
      $block['subject'] = t('MC Behance Posts');
      if (user_access('access content')) {
        // Use our custom function to retrieve data.
        $result = mc_behance_contents($delta);
        // Array to contain items for the block to render.
        $items = array();
        
        // Iterate over the resultset and format as links.

        switch ($delta){
	  		case 'getUserProjects':
	  		case 'mc_behance_getCollectionProjects':
		        foreach ($result as $node) {
		          $items[] = array(
		            'data' => l($node->name, $node->url),
		          ); 
		        }
			break;
		}
       // No content

        if (empty($items)) {
          $block['content'] = t('No posts available.');  
        } 
        else {
          // Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
    return $block;
}
function mc_behance_block_configure($delta = '') {
	/*
	if ($delta == 'mc_behance') {
		$form = array();
		$form['mc_behance__block_target_type'] = array(
		    '#type' => 'radios',
		    '#title' => t('Target Type'),
		    '#default_value' => variable_get('mc_behance__block_target_type', 'getUserProjects'),
		    '#size' => 2,
		    '#description' => t('to access User, Project, Work in Progress and Collection data'),
		    '#required' => TRUE,
		    '#options' => array("getUserAppreciations" => t("Retrieves a list of projects that ID or Username has appreciated"),
		    					"getUserProjects" => t("Retrieves a list of ID or Username's projects"),    					
		    					//"userWips" => t("User's work in progress"),
		    					//"getProject" => t("Retrieves a full Project, by ID"),	
		    					//"getCollection" => t("Retrieves a collection, by ID"),
		    					//--"getCollectionProjectsmc" => t("Retrieves a list of collection ID's projects"),
		    					//"getUserCollections" => t("Retrieves a list of ID or username's collections"),
			),
		);
	}
	 * */
	$form['mc_behance_block_target_id'] = array(
		    '#type' => 'textfield',
		    '#title' => t('Behance Targeted ID or Username'),
		    '#default_value' => variable_get('mc_behance_block_target_id'),
		    '#size' => 100,
		    '#maxlength' => 100,
		    '#description' => t('Your target for the Type'),
		    '#required' => TRUE,
		 );
	return $form;
}
/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function mc_behance_block_save($delta = '', $edit = array()) {
  /*if ($delta == 'mc_behance') {
		variable_set('mc_behance__block_target_type', $edit['mc_behance__block_target_type']);
  }*/
  variable_set('mc_behance_block_target_id', $edit['mc_behance_block_target_id']);
}
